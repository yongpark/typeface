{
  "version": 3,
  "sources": ["../../rosie/src/rosie.js"],
  "sourcesContent": ["/**\n * Creates a new factory with attributes, options, etc. to be used to build\n * objects.\n *\n * @param {Function=} constructor\n * @class\n */\nclass Factory {\n  constructor(constructor) {\n    this.construct = constructor;\n    this._attrs = {};\n    this.opts = {};\n    this.sequences = {};\n    this.callbacks = [];\n\n    Factory._allFactories.push(this);\n  }\n\n  /**\n   * Define an attribute on this factory. Attributes can optionally define a\n   * default value, either as a value (e.g. a string or number) or as a builder\n   * function. For example:\n   *\n   *   // no default value for age\n   *   Factory.define('Person').attr('age')\n   *\n   *   // static default value for age\n   *   Factory.define('Person').attr('age', 18)\n   *\n   *   // dynamic default value for age\n   *   Factory.define('Person').attr('age', function() {\n   *      return Math.random() * 100;\n   *   })\n   *\n   * Attributes with dynamic default values can depend on options or other\n   * attributes:\n   *\n   *   Factory.define('Person').attr('age', ['name'], function(name) {\n   *     return name === 'Brian' ? 30 : 18;\n   *   });\n   *\n   * By default if the consumer of your factory provides a value for an\n   * attribute your builder function will not be called. You can override this\n   * behavior by declaring that your attribute depends on itself:\n   *\n   *   Factory.define('Person').attr('spouse', ['spouse'], function(spouse) {\n   *     return Factory.build('Person', spouse);\n   *   });\n   *\n   * As in the example above, this can be a useful way to fill in\n   * partially-specified child objects.\n   *\n   * @param {string} attr\n   * @param {Array.<string>=} dependencies\n   * @param {*=} value\n   * @return {Factory}\n   */\n  attr(attr, dependencies, value) {\n    let builder;\n    if (arguments.length === 2) {\n      value = dependencies;\n      dependencies = null;\n    }\n\n    builder = typeof value === 'function' ? value : () => value;\n    this._attrs[attr] = { dependencies: dependencies || [], builder: builder };\n    return this;\n  }\n\n  /**\n   * Convenience function for defining a set of attributes on this object as\n   * builder functions or static values. If you need to specify dependencies,\n   * use #attr instead.\n   *\n   * For example:\n   *\n   *   Factory.define('Person').attrs({\n   *     name: 'Michael',\n   *     age: function() { return Math.random() * 100; }\n   *   });\n   *\n   * @param {object} attributes\n   * @return {Factory}\n   */\n  attrs(attributes) {\n    for (let attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        this.attr(attr, attributes[attr]);\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Define an option for this factory. Options are values that may inform\n   * dynamic attribute behavior but are not included in objects built by the\n   * factory. Like attributes, options may have dependencies. Unlike\n   * attributes, options may only depend on other options.\n   *\n   *   Factory.define('Person')\n   *     .option('includeRelationships', false)\n   *     .attr(\n   *       'spouse',\n   *       ['spouse', 'includeRelationships'],\n   *       function(spouse, includeRelationships) {\n   *         return includeRelationships ?\n   *           Factory.build('Person', spouse) :\n   *           null;\n   *       });\n   *\n   *   Factory.build('Person', null, { includeRelationships: true });\n   *\n   * Options may have either static or dynamic default values, just like\n   * attributes. Options without default values must have a value specified\n   * when building.\n   *\n   * @param {string} opt\n   * @param {Array.<string>=} dependencies\n   * @param {*=} value\n   * @return {Factory}\n   */\n  option(opt, dependencies, value) {\n    let builder;\n    if (arguments.length === 2) {\n      value = dependencies;\n      dependencies = null;\n    }\n    if (arguments.length > 1) {\n      builder = typeof value === 'function' ? value : () => value;\n    }\n    this.opts[opt] = { dependencies: dependencies || [], builder };\n    return this;\n  }\n\n  /**\n   * Defines an attribute that, by default, simply has an auto-incrementing\n   * numeric value starting at 1. You can provide your own builder function\n   * that accepts the number of the sequence and returns whatever value you'd\n   * like it to be.\n   *\n   * Sequence values are inherited such that a factory derived from another\n   * with a sequence will share the state of that sequence and they will never\n   * conflict.\n   *\n   *   Factory.define('Person').sequence('id');\n   *\n   * @param {string} attr\n   * @param {Array.<string>=} dependencies\n   * @param {function(number): *=} builder\n   * @return {Factory}\n   */\n  sequence(attr, dependencies, builder) {\n    if (arguments.length === 2) {\n      builder = /** @type function(number): * */ dependencies;\n      dependencies = null;\n    }\n    builder = builder || ((i) => i);\n    return this.attr(attr, dependencies, (...args) => {\n      this.sequences[attr] = this.sequences[attr] || 0;\n      args.unshift(++this.sequences[attr]);\n      return builder(...args);\n    });\n  }\n\n  /**\n   * Sets a post-processor callback that will receive built objects and the\n   * options for the build just before they are returned from the #build\n   * function.\n   *\n   * @param {function(object, object=)} callback\n   * @return {Factory}\n   */\n  after(callback) {\n    this.callbacks.push(callback);\n    return this;\n  }\n\n  /**\n   * Builds a plain object containing values for each of the declared\n   * attributes. The result of this is the same as the result when using #build\n   * when there is no constructor registered.\n   *\n   * @param {object=} attributes\n   * @param {object=} options\n   * @return {object}\n   */\n  attributes(attributes, options) {\n    attributes = { ...attributes };\n    options = this.options(options);\n    for (let attr in this._attrs) {\n      this._attrValue(attr, attributes, options, [attr]);\n    }\n    return attributes;\n  }\n\n  /**\n   * Generates a value for the given named attribute and adds the result to the\n   * given attributes list.\n   *\n   * @private\n   * @param {string} attr\n   * @param {object} attributes\n   * @param {object} options\n   * @param {Array.<string>} stack\n   * @return {*}\n   */\n  _attrValue(attr, attributes, options, stack) {\n    if (\n      !this._alwaysCallBuilder(attr) &&\n      Object.prototype.hasOwnProperty.call(attributes, attr)\n    ) {\n      return attributes[attr];\n    }\n\n    const value = this._buildWithDependencies(this._attrs[attr], (dep) => {\n      if (Object.prototype.hasOwnProperty.call(options, dep)) {\n        return options[dep];\n      } else if (dep === attr) {\n        return attributes[dep];\n      } else if (stack.indexOf(dep) >= 0) {\n        throw new Error(\n          'detected a dependency cycle: ' + stack.concat([dep]).join(' -> ')\n        );\n      } else {\n        return this._attrValue(dep, attributes, options, stack.concat([dep]));\n      }\n    });\n    attributes[attr] = value;\n    return value;\n  }\n\n  /**\n   * Determines whether the given named attribute has listed itself as a\n   * dependency.\n   *\n   * @private\n   * @param {string} attr\n   * @return {boolean}\n   */\n  _alwaysCallBuilder(attr) {\n    const attrMeta = this._attrs[attr];\n    return attrMeta.dependencies.indexOf(attr) >= 0;\n  }\n\n  /**\n   * Generates values for all the registered options using the values given.\n   *\n   * @private\n   * @param {?object} options\n   * @return {object}\n   */\n  options(options = {}) {\n    options = { ...options };\n    for (let opt in this.opts) {\n      options[opt] = this._optionValue(opt, options);\n    }\n    return options;\n  }\n\n  /**\n   * Generates a value for the given named option and adds the result to the\n   * given options list.\n   *\n   * @private\n   * @param {string} opt\n   * @param {object} options\n   * @return {*}\n   */\n  _optionValue(opt, options) {\n    if (Object.prototype.hasOwnProperty.call(options, opt)) {\n      return options[opt];\n    }\n\n    const optMeta = this.opts[opt];\n    if (!optMeta.builder) {\n      throw new Error(\n        'option `' + opt + '` has no default value and none was provided'\n      );\n    }\n\n    return this._buildWithDependencies(optMeta, (dep) =>\n      this._optionValue(dep, options)\n    );\n  }\n\n  /**\n   * Calls the builder function with its dependencies as determined by the\n   * given dependency resolver.\n   *\n   * @private\n   * @param {{builder: function(...[*]): *, dependencies: Array.<string>}} meta\n   * @param {function(string): *} getDep\n   * @return {*}\n   */\n  _buildWithDependencies(meta, getDep) {\n    const deps = meta.dependencies;\n    const args = deps.map((...args) => getDep.apply(this, args));\n    return meta.builder.apply(this, args);\n  }\n\n  /**\n   * Builds objects by getting values for all attributes and optionally passing\n   * the result to a constructor function.\n   *\n   * @param {object=} attributes\n   * @param {object=} options\n   * @return {*}\n   */\n  build(attributes, options) {\n    // Precalculate options.\n    // Because options cannot depend on themselves or on attributes, subsequent calls to\n    // `this.options` will be idempotent and we can avoid re-running builders\n    options = this.options(options);\n    const result = this.attributes(attributes, options);\n    let retval = null;\n\n    if (this.construct) {\n      const Constructor = this.construct;\n      retval = new Constructor(result);\n    } else {\n      retval = result;\n    }\n\n    for (let i = 0; i < this.callbacks.length; i++) {\n      const callbackResult = this.callbacks[i](retval, options);\n      retval = callbackResult || retval;\n    }\n    return retval;\n  }\n\n  buildList(size, attributes, options) {\n    const objs = [];\n    for (let i = 0; i < size; i++) {\n      objs.push(this.build(attributes, options));\n    }\n    return objs;\n  }\n\n  /**\n   * Extends a given factory by copying over its attributes, options,\n   * callbacks, and constructor. This can be useful when you want to make\n   * different types which all share certain attributes.\n   *\n   * @param {string|Factory} name The factory to extend.\n   * @return {Factory}\n   */\n  extend(name) {\n    const factory = typeof name === 'string' ? Factory.factories[name] : name;\n    // Copy the parent's constructor\n    if (this.construct === undefined) {\n      this.construct = factory.construct;\n    }\n    Object.assign(this._attrs, factory._attrs);\n    Object.assign(this.opts, factory.opts);\n    // Copy the parent's callbacks\n    this.callbacks = factory.callbacks.slice();\n    return this;\n  }\n\n  /**\n   * Resets any state changed by building objects back to the original values.\n   * Preserves attributes and options as-is.\n   */\n  reset() {\n    this.sequences = {};\n  }\n}\n\nFactory.factories = {};\nObject.defineProperty(Factory, '_allFactories', {\n  value: [],\n  enumerable: false,\n});\n\n/**\n * Defines a factory by name and constructor function. Call #attr and #option\n * on the result to define the properties of this factory.\n *\n * @param {!string} name\n * @param {function(object): *=} constructor\n * @return {Factory}\n */\nFactory.define = function (name, constructor) {\n  const factory = new Factory(constructor);\n  this.factories[name] = factory;\n  return factory;\n};\n\n/**\n * Locates a factory by name and calls #build on it.\n *\n * @param {string} name\n * @param {object=} attributes\n * @param {object=} options\n * @return {*}\n */\nFactory.build = function (name, attributes, options) {\n  if (!this.factories[name]) {\n    throw new Error(`The \"${name}\" factory is not defined.`);\n  }\n  return this.factories[name].build(attributes, options);\n};\n\n/**\n * Builds a collection of objects using the named factory.\n *\n * @param {string} name\n * @param {number} size\n * @param {object=} attributes\n * @param {object=} options\n * @return {Array.<*>}\n */\nFactory.buildList = function (name, size, attributes, options) {\n  const objs = [];\n  for (let i = 0; i < size; i++) {\n    objs.push(Factory.build(name, attributes, options));\n  }\n  return objs;\n};\n\n/**\n * Locates a factory by name and calls #attributes on it.\n *\n * @param {string} name\n * @param {object} attributes\n * @param {object} options\n * @return {object}\n */\nFactory.attributes = function (name, attributes, options) {\n  return this.factories[name].attributes(attributes, options);\n};\n\n/**\n * Resets a factory by name. Preserves attributes and options as-is.\n *\n * @param {string} name\n */\nFactory.reset = function (name) {\n  Factory.factories[name].reset();\n};\n\n/**\n * Resets all factory build state. Preserves attributes and options as-is.\n */\nFactory.resetAll = function () {\n  Factory._allFactories.forEach((factory) => factory.reset());\n};\n\n/**\n * Unregister and forget all existing factories.\n */\nFactory.implode = function () {\n  Factory.factories = {};\n  Factory._allFactories.length = 0;\n};\n\n/* istanbul ignore next */\nif (typeof exports === 'object' && typeof module !== 'undefined') {\n  /* eslint-env commonjs */\n  exports.Factory = Factory;\n  /* eslint-env commonjs:false */\n} else if (typeof define === 'function' && define.amd) {\n  /* eslint-env amd */\n  define([], () => ({\n    Factory: Factory,\n  }));\n  /* eslint-env amd:false */\n} else if (this) {\n  this.Factory = Factory;\n}\n"],
  "mappings": "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",
  "names": ["args"]
}
